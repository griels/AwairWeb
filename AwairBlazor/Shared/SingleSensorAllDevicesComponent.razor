@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.Util
@inject IJSRuntime JsRuntime
@inject HttpClient Http
@inject AwairBlazor.Services.AppData appData

<h2>@title</h2>
<ChartJsLineChart @ref="_lineChartJs" Config="@_lineConfig" Width="600" Height="300" />

@code
{
    [Parameter]
    public QuickType.Comp Sensor { get; set; }

    LineConfig _lineConfig;
    ChartJsLineChart _lineChartJs;
    LineDataset<TimeTuple<double>> _tempDataSet;

    private string title = "Time Line Chart";

    protected override async Task OnInitializedAsync()
    {
        System.Diagnostics.Trace.WriteLine(this.GetType().ToString() + ": Init");
        title = Sensor.ToString() + " Chart (loading...)";

        _lineConfig = new LineConfig
        {
            Options = new LineOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Line Chart"
                },
                Legend = new Legend
                {
                    Position = Position.Right,
                    Labels = new LegendLabelConfiguration
                    {
                        UsePointStyle = true
                    }
                },
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = false
                },
                Scales = new Scales
                {
                    xAxes = new List<CartesianAxis>
{
                        new TimeAxis
                        {
                            Distribution = TimeDistribution.Linear,
                            Ticks = new TimeTicks
                            {
                                Source = TickSource.Data
                            },
                            Time = new TimeOptions
                            {
                                Unit = TimeMeasurement.Millisecond,
                                Round = TimeMeasurement.Millisecond,
                                TooltipFormat = "DD.MM.YYYY HH:mm:ss:SSS",
                                DisplayFormats = TimeDisplayFormats.DE_CH
                            },
                            ScaleLabel = new ScaleLabel
                            {
                                LabelString = "Time"
                            }
                        }
                    }
                },
                Hover = new LineOptionsHover
                {
                    Intersect = true,
                    Mode = InteractionMode.Y
                }
            }
        };

        await appData.InitAsync();
        title = (appData.PastHour.Value ? "Past hour " : "Past day ") + Sensor.ToString() + " Chart (loading...)";
        var api = new AwairService(Http, appData.Bearer.Value);
        MultiDeviceRawData multiraw;

        var devices = await api.GetDevicesAsync();
        await appData.AssignDeviceColors(devices);

        if (appData.PastHour.Value)
        {
            multiraw = await api.GetAllDevicePastHourRawData(devices);
        }
        else
        {
            multiraw = await api.GetAllDevicePastDay5MinData(devices);
        }

        foreach (var raw in multiraw.RawAirData)
        {
            _tempDataSet = new LineDataset<TimeTuple<double>>
            {
                BackgroundColor = ColorUtil.FromDrawingColor(raw.Device.Color),
                BorderColor = ColorUtil.FromDrawingColor(raw.Device.Color),
                //BorderColor = ColorUtil.RandomColorString(),
                Label = raw.Device.Name,
                Fill = false,
                BorderWidth = 2,
                PointRadius = 3,
                PointBorderWidth = 1,
                SteppedLine = SteppedLine.False
            };

            _tempDataSet.AddRange(raw.FlatData.Select(p => new TimeTuple<double>(new Moment(p.Timestamp), p.ValueBySensorType(Sensor))));
            _lineConfig.Data.Datasets.Add(_tempDataSet);
        }

        title = (appData.PastHour.Value ? "Past hour " : "Past day ") + Sensor.ToString() + " Chart";

    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    await TryChangeLocale();
    //}

    private async Task OnClick()
    {
        _tempDataSet.Fill = !_tempDataSet.Fill;
        await _lineChartJs.Update();
    }
}